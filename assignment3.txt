makeCacheMatrix <- function(x = numeric()) {
    
      # holds the cached value or NULL if nothing is cached
      # initially nothing is cached so set it to NULL
      cache <- NULL
      
      # store a matrix
      setMatrix <- function(newValue) {
        x <<- newValue
        # since the matrix is assigned a new value, flush the cache
              cache <<- NULL
            }
       
          # returns the stored matrix
       getMatrix <- function() {
              x
           }
           
            # cache the given argument 
             cacheInverse <- function(solve) {
                cache <<- solve
             }
             
              # get the cached value
              getInverse <- function() {
                  cache
                 }
               
          # return a list. Each named element of the list is a function
           list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
     }
 
 ###
cacheSolve <- function(y, ...) {
     # get the cached value
      inverse <- y$getInverse()
      # if a cached value exists return it
      if(!is.null(inverse)) {
      message("getting cached data")
             return(inverse)
             }
        # otherwise get the matrix, caclulate the inverse and store it in
         # the cache
          data <- y$getMatrix()
         inverse <- solve(data)
          y$cacheInverse(inverse)
         
         # return the inverse
           inverse
        }

niraj <- makeCacheMatrix(matrix(c(54, 64, 74, 84), nrow = 2, ncol = 2))
summary(niraj)
    Length Class  Mode    
    setMatrix    1      -none- function
    getMatrix    1      -none- function
    cacheInverse 1      -none- function
    getInverse   1      -none- function
     
      
niraj$getMatrix()
    [,1] [,2]
    [1,]   54   74
    [2,]   64   84
    > 
cacheSolve(niraj)
    [,1]  [,2]
    [1,] -0.42  0.37
    [2,]  0.32 -0.27
